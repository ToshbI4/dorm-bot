import logging
import re
from utils import TestStates

from aiogram import Bot, Dispatcher, executor
from aiogram.dispatcher.filters import Text
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton, \
    Message, ParseMode, CallbackQuery, InputFile


class DormBot:
    f = open("bot_token.txt", "r")
    bot_token = f.read().strip()
    f.close()

    # Initialize bot and dispatcher
    bot = Bot(token=bot_token)
    dp = Dispatcher(bot, storage=MemoryStorage())
    dp.middleware.setup(LoggingMiddleware())

    def __init__(self):

        executor.start_polling(self.dp, on_shutdown=DormBot.shutdown, skip_updates=True)

    @staticmethod
    @dp.message_handler(state='*', text=['–•–æ—á—É —Å–ø—Ä–æ—Å–∏—Ç—å.'])
    async def question(message: Message):
        state = DormBot.dp.current_state(user=message.from_user.id)

        await state.set_state(TestStates.all()[2])
        await message.reply('–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞.', reply=False)

    @staticmethod
    @dp.message_handler(state='*', text=['–•–æ—á—É –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É.'])
    async def request(message: Message):
        state = DormBot.dp.current_state(user=message.from_user.id)

        await state.set_state(TestStates.all()[3])
        await message.reply('–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n'
                            '–ö–æ–º—É (—ç–ª–µ–∫—Ç—Ä–∏–∫—É/—Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫—É/–ø–ª–æ—Ç–Ω–∏–∫—É)\n'
                            '–ú–µ—Å—Ç–æ (–∫–æ–º–Ω–∞—Ç–∞ 2222/–≤—Ç–æ—Ä–∞—è –∫–∞–±–∏–Ω–∫–∞, —Ç—É–∞–ª–µ—Ç, 3–π –±–ª–æ–∫, 10 —ç—Ç–∞–∂)\n'
                            '–°–∏—Ç—É–∞—Ü–∏—è (—Ñ–æ–Ω—Ç–∞–Ω –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–π –∫—Ä–∞—Å–æ—Ç—ã –ø—Ä—è–º–∏–∫–æ–º –∏–∑ —É–Ω–∏—Ç–∞–∑–∞)', reply=False)

    @staticmethod
    @dp.message_handler(state='*', text=['–ï—Å—Ç—å –∏–¥–µ—è/–ø–æ–∂–µ–ª–∞–Ω–∏–µ/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.'])
    async def question(message: Message):
        state = DormBot.dp.current_state(user=message.from_user.id)

        await state.set_state(TestStates.all()[1])
        await message.reply('–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. '
                            '–û–Ω –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è', reply=False)

    @staticmethod
    @dp.message_handler(state=TestStates.QUESTION)
    async def first_test_state_case_met(message: Message):
        state = DormBot.dp.current_state(user=message.from_user.id)

        question = message.text.lower()

        await state.reset_state()

        if not question.find('—Ä–∞—Å–ø–∏—Å–∞–Ω') == -1:
            if not question.find('–¥—É—à') == -1:
                showerPhoto = InputFile("shower.jpg")
                await DormBot.bot.send_photo(message.from_user.id, showerPhoto)
            elif not question.find('–ø—Ä–∞—á–µ—á–Ω') == -1:
                await message.reply('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∞—á–µ—á–Ω–æ–π.')
            else:
                return await message.reply('–¢–∞–∫–æ–π –∫–æ–º–Ω–∞—Ç—ã –Ω–µ—Ç –≤ –º–æ–µ–π –±–∞–∑–µ.'
                                           '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥—É—à–∞"')
        elif not question.find('–æ—Å–º–æ—Ç—Ä') == -1:
            osmotrPhoto = InputFile("osmotr.jpg")
            await DormBot.bot.send_photo(message.from_user.id, osmotrPhoto)

        # keyboards.py
        inline_btn_1 = InlineKeyboardButton('–î–∞ :)', callback_data='qst_yes')
        inline_btn_2 = InlineKeyboardButton('–ù–µ—Ç :(', callback_data='qst_no')
        inline_kb1 = InlineKeyboardMarkup().add(inline_btn_1, inline_btn_2)

        return await message.answer('–Ø –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å? \n---\n\"' + message.text + '\"',
                                   reply_markup=inline_kb1)

    @staticmethod
    @dp.message_handler(state=TestStates.REQUEST)
    async def second_test_state_case_met(message: Message):
        state = DormBot.dp.current_state(user=message.from_user.id)
        await state.reset_state()
        return await message.reply('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞.')

    @staticmethod
    @dp.message_handler(state=TestStates.IDEA)
    async def third_test_state_case_met(message: Message):
        state = DormBot.dp.current_state(user=message.from_user.id)
        await state.reset_state()
        return await message.reply('–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ '
                                   '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.')

    @staticmethod
    @dp.callback_query_handler(lambda c: c.data.startswith('qst_yes'))
    async def process_callback_button1(callback_query: CallbackQuery):
        await DormBot.bot.answer_callback_query(callback_query.id)
        await DormBot.bot.send_message(callback_query.from_user.id, '–ü—Ä–∏—è—Ç–Ω–æ –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º!')

    @staticmethod
    @dp.callback_query_handler(lambda c: c.data.startswith('qst_no'))
    async def process_callback_button2(callback_query: CallbackQuery):
        sent_qst = callback_query.message.text
        print(sent_qst.split('---\n')[1])
        await DormBot.bot.answer_callback_query(callback_query.id)
        await DormBot.bot.send_message(callback_query.from_user.id, '–í–∏–Ω–æ–≤–∞—Ç. –í–∞—à –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω '
                                                                    '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç —á–µ–ª–æ–≤–µ–∫.')

    @staticmethod
    @dp.message_handler(commands=['start', 'help'])
    async def send_welcome(message: Message):
        """
        This handler will be called when user sends `/start` or `/help` command
        """

        button_questions = KeyboardButton('–•–æ—á—É —Å–ø—Ä–æ—Å–∏—Ç—å.')
        button_request = KeyboardButton('–•–æ—á—É –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É.')
        button_idea = KeyboardButton('–ï—Å—Ç—å –∏–¥–µ—è/–ø–æ–∂–µ–ª–∞–Ω–∏–µ/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.')
        greet_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        greet_kb.add(button_questions)
        greet_kb.add(button_request)
        greet_kb.add(button_idea)

        await message.answer(f"–ü—Ä–∏–≤–µ—Ç! {message.from_user.first_name}! üëã",
                             parse_mode=ParseMode.HTML, reply_markup=greet_kb
                             )

    @staticmethod
    @dp.message_handler(state='*')
    async def some_test_state_case_met(message: Message):
        await message.reply('–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏e –≤ –º–µ–Ω—é –∏–∑ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ –¥–∏–∞–ª–æ–≥–∞.', reply=False)

    @staticmethod
    async def shutdown(dispatcher: Dispatcher):
        await dispatcher.storage.close()
        await dispatcher.storage.wait_closed()


if __name__ == '__main__':
    bot = DormBot()
